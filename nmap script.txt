#!/bin/bash

#the purpose of this script will be to offer a user multiple methods of scanning their specified ip using nmap.
#nmap is a tool used through the CLI(Command Line Interface) which allows you to scan a specified ip address for a number of different purposes,
#most of which are outlined in the options below.

#Here the variables are defined, for use later on in the script.
ip="$ip"
DELAY="10"
DELAY2="30"
#This while loop is the true beginning of the script, and it is saying that while the user's input does not = nothing, display the menu.
#$REPLY variable is used in this script to store user selections from the menu.
while [[ "$REPLY" != 0 ]]; do
#This is the menu output to the user. cat <<-_EOF_ tells the script to write all of the lines below out to the user in text.
        clear
        cat <<-_EOF_
Welcome to the all-in-one nmap scanning script.
Please select which scan you would like to use.
1. ping the target ip
2. OS & service information scan 
3. Service version scan 
4. UDP port scan (1-10000)       
5. TCP port scan (1-10000) 
6. Stealth port scan (1-10000) 
7. Stealth port scan (every port) 
8. Script scan    
0. Exit the service 
_EOF_
#This closes the _EOF_ command, telling the script that it is no longer taking all code as text to be shown to the user.

        #read -p command takes input from the user, in this case its allowing them to choose from the above options.
        read -p "Enter your chosen option [0-8]"
                #This if statement is used to end the script and output a goodbye message to the user should they choose option 0 from above options.
                if [[ "$REPLY" = 0 ]]; then
                        echo "Goodbye."
                        break
                #Else if is then used to prompt the user for their target ip, should they choose from options 1 through 6.
                elif [[ "$REPLY" =~ ^[1-8]$ ]]; then
                        read -p "Enter your target ip address:" ip
                #Else is used here to provide output stating the user has given invalid input, if they do not enter from options 0 through 6.
                else
                        echo "That is not a valid option."
                fi #fi is used to close if statements, so the script knows to move on to the next part of its code.
#This if statement is taking the user's input regarding the target ip address,and saying if they have given a valid ip, begin the block of code which contains the menu options.
if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
               #This if statement is saying to run each option depending on the user's menu choice between numbers 1 through 6.
        if [[ "$REPLY" =~ ^[1-6]$ ]]; then
                        #if statement used to run the ping test, if the user inputs number 1 as their menu option.
                        if [[ "$REPLY" = 1 ]]; then
                                echo "You have selected: ping the target ip"
                                echo " "
                                echo "Now pinging $ip. . ."
                                echo " "
                                #Command used to tell the script to ping the user's target ip address four times.
                                ping -c4 $ip
                                        #These if/else statements are used to provide output to the user letting them know if the target ip is currently up or down.
                                         if [ "$?" = 0 ]; then

                                                echo "Target host status: up"
                                                #sleep command is used to give the user a certain amount of time before going back to the main menu, in this case 5 seconds because we used the pre-defined $DELAY variable.
                                                sleep "$DELAY"
                                                #continue command will take user back to the main menu after the defined $DELAY time is up.
                                                continue
                                        else
                                                echo "Target host status: down"
                                                sleep "$DELAY"
                                                continue



                                        fi
                        fi
                fi
        fi
        #This is the beginning of option 2, the OS information scan.
        if [[ "$REPLY" = 2 ]]; then
                echo "You have selected: OS & service information scan"
                echo " "
                echo "Beginning scan of $ip"
                #nmap -a command is used against the variable in which the user's target ip was placed, which will output information on the targets operating system.
                nmap -A $ip
                echo " "
                echo "Returning to main menu in 30 seconds."
                #Here we use the sleep command with the second defined $DELAY variable, to increase the time the user has to view output before reverting back to the main menu.
                sleep "$DELAY2"
                continue
        fi
        #Beginning of the third option, nmap's service version scan.
        if [[ "$REPLY" = 3 ]]; then
                echo "You have selected: Service version scan"
                echo " "
                echo "Scanning target. . ."
		#nmap -sv command is used against the target ip address, which will provide specific service information to the user after scanning.
                nmap -sV $ip
                echo "Returning to main menu in 30 seconds."
                sleep "$DELAY2"
                continue
        fi
        #This if statement will initiate the scan of UDP ports only on the user's ip address.
        if [[ "$REPLY" = 4 ]]; then
                echo "You have chosen: UDP port scan"
                echo " "
                echo "Beginning UDP scan of $ip ..."
                #nmap -sU command tells the nmap application to scan only against UDP ports 1 through 10000, excluding TCP.
                nmap -p 1-10000 -sU $ip
                echo "UDP scan complete. Returning to main menu in 30 seconds ..."
                sleep "$DELAY2"
                continue

        fi
        #Next is the "if statement that allows the user to scan TCP ports only excluding UDP.
        if [[ "$REPLY" = 5 ]]; then
                echo "You have chosen: TCP port scan"
                echo " "
                echo "Beginning scan of $ip ..."
                #This command tells the script to run an nmap TCP-exclusive port scan against ports 1 through 10000
                nmap -p 1-10000 -sT $ip
                echo "TCP scan complete. Returning to main menu in 30 seconds ..."
                sleep "$DELAY2"
                continue

        fi
        #This is the if statement that will run a quiet version of the TCP connect scan.
if [[ "$REPLY" = 6 ]]; then
        echo "You have chosen: Stealth port scan (ports 1-10000)"
        echo " "
        echo "beginning stealth scan of $ip ..."
        #The nmap command that will allow the user to perform a quiet scan, by not completing the TCP three-way handshake.
        nmap -p 1-10000 -sS $ip
        echo "Stealth scan complete. 30 seconds to review before returning to main menu."
        sleep "$DELAY2"
        continue

        fi
	#if statement that will allow the user to run an nmap stealth TCP scan against their specified ip address.
if [[ "$REPLY" = 7 ]]; then
        echo "You have chosen: Stealth port scan (every port)"
        echo " "
        echo "Beginning stealth scan of $ip ..."
        #This is the nmap command used to stealth scan every port. Instead of specifying the numbers, -p- is used.
        nmap -p- -sS $ip
        echo "Stealth scan of every port. Returning to main menu in 30 seconds."
        sleep "$DELAY2"
        continue

        fi
        #the if statement here will tell the script to run option 8 if the user selected that option.
if [[ "$REPLY" = 8 ]]; then
        echo "You have chosen: Script scan"
        echo " "
        echo "Beginning -sC (script scan) against target ip ..."
        #nmap command that will run a script scan (-sC) against the user's input ip address.
        nmap -sC $ip
        echo "Script scan complete. Returning to main menu in 30 seconds."
        sleep "$DELAY2"
        continue
        fi


#done command tells the script that this is the final line, the end of the script.
done
